spring:
  application:
   name: oauth2-session
  # DB
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/oauth2?useSSL=false&timezone=UTC&characterEncoding=utf8
    username: root
    password: ${password}
  jpa:
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        format_sql: true # SQL formatting
#  # security
#  security:
#    oauth2:
#      client:
#        # registration => ?? ????? ?? ???? ???? ??? ???? ??. ????? ??
#        registration:
#          naver:
#            client-name: naver
#            client-id: ${client-id-naver}
#            client-secret: ${client-secret-naver}
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8080/login/oauth2/code/naver
#            scope: name, email
#          google:
#            client-name: google
#            client-id: ${client-id-google}
#            client-secret: ${client-secret-google}
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8080/login/oauth2/code/google
#            scope: profile, email
#
#        # provider => ??? ?? ??? ?? ?? ???.
#        #              OAuth2 ?????? ???? ??? ???? ?? ????? ???? ??? ??
#        #              ex) ??, Okta, ????, ??? ??
#        provider:
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize
#            token-uri: https://nid.naver.com/oauth2.0/token
#            user-info-uri: https://openapi.naver.com/v1/nid/me
#            user-name-attribute: response

logging:
  level:
    org.hibernate.SQL: debug # SQL logging